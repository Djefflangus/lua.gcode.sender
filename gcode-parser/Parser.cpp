/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"




void Parser::SynErr(int n) {
	if (errDist >= minErrDist) errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::GCode() {
		call(1, INIT); 
		while (!(StartOf(1))) {SynErr(43); Get();}
		while (StartOf(2)) {
			if (StartOf(3)) {
				while (StartOf(4)) {
					if (StartOf(5)) {
						GcodeCmd();
					} else {
						PragCmnt();
					}
				}
				Expect(_eolTok);
				call(t->line, EOL); 
			} else if (la->kind == _param) {
				ParamDecl();
			} else {
				NonGcodeCmd();
			}
			while (la->kind == _eolTok) {
				Get();
			}
		}
		Expect(_EOF);
		call(t->line, FINI);
		
}

void Parser::GcodeCmd() {
		pwchar cmd, num; 
		if (la->kind == 16 /* "g" */ || la->kind == 17 /* "m" */ || la->kind == 18 /* "t" */) {
			CmdNoMoveAloneLetter(cmd);
			if (StartOf(6)) {
				NumberSign(num);
				
			}
			call(t->line, CMD, cmd, num); 
		} else if (StartOf(7)) {
			CmdNoMoveParamLetter(cmd);
			NumberSign(num);
			call(t->line, CMD, cmd, num); 
		} else if (StartOf(8)) {
			CmdMoveLetter(cmd);
			NumberSign(num);
			call(t->line, CMD, cmd, num); 
		} else SynErr(44);
}

void Parser::PragCmnt() {
		Expect(6 /* "(" */);
		
		while (StartOf(9)) {
			switch (la->kind) {
			case _ident: {
				Get();
				break;
			}
			case _number: {
				Get();
				break;
			}
			case _param: {
				Get();
				break;
			}
			case _pragmaBody: {
				Get();
				break;
			}
			case 7 /* "%" */: {
				Get();
				break;
			}
			case 8 /* "=" */: {
				Get();
				break;
			}
			case 9 /* "+" */: {
				Get();
				break;
			}
			case 10 /* "-" */: {
				Get();
				break;
			}
			case 11 /* "/" */: {
				Get();
				break;
			}
			case 12 /* "*" */: {
				Get();
				break;
			}
			case 13 /* "^" */: {
				Get();
				break;
			}
			case 14 /* "[" */: {
				Get();
				break;
			}
			case 15 /* "]" */: {
				Get();
				break;
			}
			case 16 /* "g" */: {
				Get();
				break;
			}
			case 17 /* "m" */: {
				Get();
				break;
			}
			case 18 /* "t" */: {
				Get();
				break;
			}
			case 19 /* "s" */: {
				Get();
				break;
			}
			case 20 /* "f" */: {
				Get();
				break;
			}
			case 21 /* "p" */: {
				Get();
				break;
			}
			case 22 /* "d" */: {
				Get();
				break;
			}
			case 23 /* "e" */: {
				Get();
				break;
			}
			case 24 /* "h" */: {
				Get();
				break;
			}
			case 25 /* "l" */: {
				Get();
				break;
			}
			case 26 /* "n" */: {
				Get();
				break;
			}
			case 27 /* "o" */: {
				Get();
				break;
			}
			case 28 /* "x" */: {
				Get();
				break;
			}
			case 29 /* "y" */: {
				Get();
				break;
			}
			case 30 /* "z" */: {
				Get();
				break;
			}
			case 31 /* "a" */: {
				Get();
				break;
			}
			case 32 /* "b" */: {
				Get();
				break;
			}
			case 33 /* "c" */: {
				Get();
				break;
			}
			case 34 /* "u" */: {
				Get();
				break;
			}
			case 35 /* "v" */: {
				Get();
				break;
			}
			case 36 /* "w" */: {
				Get();
				break;
			}
			case 37 /* "i" */: {
				Get();
				break;
			}
			case 38 /* "j" */: {
				Get();
				break;
			}
			case 39 /* "k" */: {
				Get();
				break;
			}
			case 40 /* "r" */: {
				Get();
				break;
			}
			}
			
		}
		Expect(41 /* ")" */);
		
}

void Parser::ParamDecl() {
		pwchar key, num; 
		Expect(_param);
		key = coco_string_create(t->val); 
		Expect(8 /* "=" */);
		NumberSign(num);
		set_param(key, num); 
		while (la->kind == 6 /* "(" */) {
			PragCmnt();
		}
		Expect(_eolTok);
}

void Parser::NonGcodeCmd() {
		wchar_t *var, *val;
		
		Expect(7 /* "%" */);
		
		Expect(_ident);
		var = coco_string_create(t->val); 
		//printf("%% var = %ls\n", var);
		
		Expect(8 /* "=" */);
		Expr(val);
		set_param(var, val); 
		Expect(_eolTok);
}

void Parser::NumberSign(pwchar &num) {
		int sign = 1; 
		while (la->kind == 9 /* "+" */ || la->kind == 10 /* "-" */) {
			if (la->kind == 10 /* "-" */) {
				Get();
				sign *= -1; 
			} else {
				Get();
			}
		}
		Number(num, sign);
}

void Parser::Expr(pwchar &rslt) {
		double value; 
		wchar_t buf[25];
		//printf("exp begin\n");
		
		Expression(&value);
		swprintf(buf, 24, L"%lf", value);
		rslt = coco_string_create(buf);
		
		//printf("tst --> %ls\n", buf); 
		
}

void Parser::CmdNoMoveAloneLetter(pwchar &cmd) {
		cmd = 0; 
		if (la->kind == 16 /* "g" */) {
			Get();
		} else if (la->kind == 17 /* "m" */) {
			Get();
		} else if (la->kind == 18 /* "t" */) {
			Get();
		} else SynErr(45);
		cmd =  coco_string_create_upper(t->val); 
}

void Parser::CmdNoMoveParamLetter(pwchar &cmd) {
		cmd = 0; 
		switch (la->kind) {
		case 19 /* "s" */: {
			Get();
			break;
		}
		case 20 /* "f" */: {
			Get();
			break;
		}
		case 21 /* "p" */: {
			Get();
			break;
		}
		case 22 /* "d" */: {
			Get();
			break;
		}
		case 23 /* "e" */: {
			Get();
			break;
		}
		case 24 /* "h" */: {
			Get();
			break;
		}
		case 25 /* "l" */: {
			Get();
			break;
		}
		case 26 /* "n" */: {
			Get();
			break;
		}
		case 27 /* "o" */: {
			Get();
			break;
		}
		default: SynErr(46); break;
		}
		cmd =  coco_string_create_upper(t->val); 
}

void Parser::CmdMoveLetter(pwchar &cmd) {
		cmd = 0; 
		switch (la->kind) {
		case 28 /* "x" */: {
			Get();
			break;
		}
		case 29 /* "y" */: {
			Get();
			break;
		}
		case 30 /* "z" */: {
			Get();
			break;
		}
		case 31 /* "a" */: {
			Get();
			break;
		}
		case 32 /* "b" */: {
			Get();
			break;
		}
		case 33 /* "c" */: {
			Get();
			break;
		}
		case 34 /* "u" */: {
			Get();
			break;
		}
		case 35 /* "v" */: {
			Get();
			break;
		}
		case 36 /* "w" */: {
			Get();
			break;
		}
		case 37 /* "i" */: {
			Get();
			break;
		}
		case 38 /* "j" */: {
			Get();
			break;
		}
		case 39 /* "k" */: {
			Get();
			break;
		}
		case 40 /* "r" */: {
			Get();
			break;
		}
		default: SynErr(47); break;
		}
		cmd =  coco_string_create_upper(t->val); 
}

void Parser::Number(pwchar &num, int sign) {
		if (la->kind == _number) {
			Get();
			if(sign == 1)
			   num =  coco_string_create(t->val); 
			else
			   num = coco_string_create_append(L"-", t->val);
			
		} else if (la->kind == _param) {
			Get();
			num = get_param(t->val); 
		} else if (la->kind == 14 /* "[" */) {
			Get();
			if (la->kind == _ident) {
				Get();
			} else if (la->kind == _param) {
				Get();
			} else SynErr(48);
			num = get_param(t->val); 
			Expect(15 /* "]" */);
		} else SynErr(49);
}

void Parser::Expression(double *result) {
		Add(result);
		
}

void Parser::Add(double *result) {
		double result1, result2; 
		Mult(&result1);
		while (la->kind == 9 /* "+" */ || la->kind == 10 /* "-" */) {
			if (la->kind == 9 /* "+" */) {
				Get();
				Mult(&result2);
				result1 += result2; 
			} else {
				Get();
				Mult(&result2);
				result1 -= result2; 
			}
		}
		*result = result1; 
}

void Parser::Mult(double *result) {
		double result1, result2; 
		Power(&result1);
		while (la->kind == 11 /* "/" */ || la->kind == 12 /* "*" */) {
			if (la->kind == 12 /* "*" */) {
				Get();
				Power(&result2);
				result1 *= result2; 
			} else {
				Get();
				Power(&result2);
				result1 /= result2; 
			}
		}
		*result = result1; 
}

void Parser::Power(double *result) {
		double result1, result2; 
		Single(&result1);
		if (la->kind == 13 /* "^" */) {
			Get();
			Single(&result2);
			result1 = pow(result1, result2); 
		}
		*result = result1; 
}

void Parser::Single(double *result) {
		int sign = 1;
		pwchar num_s;
		*result = 0.0;
		
		while (la->kind == 9 /* "+" */ || la->kind == 10 /* "-" */) {
			if (la->kind == 10 /* "-" */) {
				Get();
				sign *= -1; 
			} else {
				Get();
			}
		}
		if (la->kind == 6 /* "(" */) {
			Get();
			Expression(result);
			Expect(41 /* ")" */);
		} else if (la->kind == _number || la->kind == _param || la->kind == 14 /* "[" */) {
			Number(num_s, 1);
			*result = wcstod(num_s, NULL); 
		} else SynErr(50);
		*result *= sign; 
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	GCode();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	maxT = 42;

	ParserInitCaller<Parser>::CallInit(this);
	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[10][44] = {
		{T,x,x,T, T,x,T,T, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x},
		{T,x,x,T, T,x,T,T, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x},
		{x,x,x,T, T,x,T,T, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x},
		{x,x,x,x, T,x,T,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x},
		{x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x},
		{x,x,T,T, x,x,x,x, x,T,T,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x},
		{x,T,T,T, x,T,x,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,x,x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"ident expected"); break;
			case 2: s = coco_string_create(L"number expected"); break;
			case 3: s = coco_string_create(L"param expected"); break;
			case 4: s = coco_string_create(L"eolTok expected"); break;
			case 5: s = coco_string_create(L"pragmaBody expected"); break;
			case 6: s = coco_string_create(L"\"(\" expected"); break;
			case 7: s = coco_string_create(L"\"%\" expected"); break;
			case 8: s = coco_string_create(L"\"=\" expected"); break;
			case 9: s = coco_string_create(L"\"+\" expected"); break;
			case 10: s = coco_string_create(L"\"-\" expected"); break;
			case 11: s = coco_string_create(L"\"/\" expected"); break;
			case 12: s = coco_string_create(L"\"*\" expected"); break;
			case 13: s = coco_string_create(L"\"^\" expected"); break;
			case 14: s = coco_string_create(L"\"[\" expected"); break;
			case 15: s = coco_string_create(L"\"]\" expected"); break;
			case 16: s = coco_string_create(L"\"g\" expected"); break;
			case 17: s = coco_string_create(L"\"m\" expected"); break;
			case 18: s = coco_string_create(L"\"t\" expected"); break;
			case 19: s = coco_string_create(L"\"s\" expected"); break;
			case 20: s = coco_string_create(L"\"f\" expected"); break;
			case 21: s = coco_string_create(L"\"p\" expected"); break;
			case 22: s = coco_string_create(L"\"d\" expected"); break;
			case 23: s = coco_string_create(L"\"e\" expected"); break;
			case 24: s = coco_string_create(L"\"h\" expected"); break;
			case 25: s = coco_string_create(L"\"l\" expected"); break;
			case 26: s = coco_string_create(L"\"n\" expected"); break;
			case 27: s = coco_string_create(L"\"o\" expected"); break;
			case 28: s = coco_string_create(L"\"x\" expected"); break;
			case 29: s = coco_string_create(L"\"y\" expected"); break;
			case 30: s = coco_string_create(L"\"z\" expected"); break;
			case 31: s = coco_string_create(L"\"a\" expected"); break;
			case 32: s = coco_string_create(L"\"b\" expected"); break;
			case 33: s = coco_string_create(L"\"c\" expected"); break;
			case 34: s = coco_string_create(L"\"u\" expected"); break;
			case 35: s = coco_string_create(L"\"v\" expected"); break;
			case 36: s = coco_string_create(L"\"w\" expected"); break;
			case 37: s = coco_string_create(L"\"i\" expected"); break;
			case 38: s = coco_string_create(L"\"j\" expected"); break;
			case 39: s = coco_string_create(L"\"k\" expected"); break;
			case 40: s = coco_string_create(L"\"r\" expected"); break;
			case 41: s = coco_string_create(L"\")\" expected"); break;
			case 42: s = coco_string_create(L"??? expected"); break;
			case 43: s = coco_string_create(L"this symbol not expected in GCode"); break;
			case 44: s = coco_string_create(L"invalid GcodeCmd"); break;
			case 45: s = coco_string_create(L"invalid CmdNoMoveAloneLetter"); break;
			case 46: s = coco_string_create(L"invalid CmdNoMoveParamLetter"); break;
			case 47: s = coco_string_create(L"invalid CmdMoveLetter"); break;
			case 48: s = coco_string_create(L"invalid Number"); break;
			case 49: s = coco_string_create(L"invalid Number"); break;
			case 50: s = coco_string_create(L"invalid Single"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}


